INTRODUCTION TO METHODS

class Calculator
{
    int a;
    public int add(int n1, int n2)
    {
        int r = n1+n2;
        return r;
    }
}
    public class Hello 
{   
public static void main(String a[])
    {
        int num1=4;
        int num2=5;

        Calculator calc = new Calculator(); 
        int result = calc.add (num1,num2);

       System.out.println(result);
    }
}


----------------------------------------------------------
EXAMPLE FOR WHILE LOOP

public class Hello 
{
public static void main(String a[])
    {
     
       int i=1;
       while(i<=4)
      {
       System.out.println("bye" + i);
       
       i++;
       }

    

    }

}

-------------------------------------------------------------------------------------
Loops USING METHODS

import javax.lang.model.util.ElementScanner14;

class Computer
{
    public void playMusic()
    {
      System.out.println("Music Playing");
    }

    public String getMeAPen(int cost)

    {
        if (cost<10)
          return "pen";
       // else
            return "nothing";
    }
}
    public class Hello 
{   
public static void main(String a[])
    {
     Computer com = new Computer();
        com.playMusic();
        String str = com.getMeAPen(5);
       System.out.println(str);
    

    }
}

-------------------------------------------------------------------------
METHOD OVERLOADING


class Calculator
{
    public int add(int n1,int n2, int n3)
    {
    return n1+n2+n3;  
}
public int add(int n1,int n2)
    {
    return n1+n2;  
}
public double add(double n1,int n2)
    {
    return n1+n2;  
}
}
    public class Hello 
{   
public static void main(String a[])
    {
    Calculator Cal = new Calculator();
    int r1 = Cal.add (3,4);
    System.out.println(r1);
    

    }
}

---------------------------------------------------------------------------
UPDATING THE VALUE OF THE VARIABLE WHILE PRINTING

class Calculator
{
int num=5;
public int add(int n1,int n2)
{
    return n1+n2;
}
}
    public class Hello 
{   
public static void main(String a[])
    {
    Calculator Cal = new Calculator();
    Calculator Cal2 = new Calculator();
    int r1 = Cal.add (3,4);
    Cal.num=10;
    System.out.println(Cal.num);
    System.out.println(Cal2.num);
  

    }
}

-----------------------------------------------------------------------------------------------
FOR LOOP

    public class Hello 
{   
public static void main(String a[])
    {
    int nums[] = new int[4];

    nums[0]=5;
    nums[1]=6;
    nums[2]=7;
    nums[3]=4; 
    for (int i=0;i<4;i++)
    {
    System.out.println(nums[i]);
    }
    }
}

-----------------------------------------------------------------------------
creating and adding random values with the help of methods


    public class Hello 
{   
public static void main(String a[])
    {
        int nums[][] = new int[3][4];
            int random = 0;
        
                for (int i=0;i<3;i++)
                       {
                    for(int j=0;j<4;j++)
                    {

                        nums[i][j]= (int)( Math.random() *10);
                    }
                }
        
                 for (int i=0;i<3;i++)
        {
                    for(int j=0;j<4;j++)
        {
                 System.out.print(nums[i][j] + " ");
        }
                     System.out.println();
        }   
        }
}
    


------------------------------------------------------------------------------------
generation random 3 by 4 matrix by using methods with array


public class Hello 
{   

    public static void main(String a[])
    {
     int nums[][] = new int[3][4];
     //int random =0;

     for (int i=0; i<3; i++)
     {
             for (int j=0; j<4; j++)
         {               
          nums[i][j]=(int)(Math.random() *10);
          
         }   
     }
        for (int i=0; i<3; i++)
        {
                for (int j=0; j<4; j++)
            {               
                 System.out.print(nums[i][j] + " ");
            }
          System.out.println();    
        }
    }
    
}

--------------------------------------------------------------------------------------

Same Above Solution with Enhanced FOR loop

     for (int n[] : nums)
        {
            for (int m:n)
            {
                System.out.print(m + " ");
            }
            System.out.println();
        }

--------------------------------------------------------------------------------------
Jagged Array

public class Hello 
{   

    public static void main(String a[])
    {
     int nums[][] = new int[3][];
     //int random =0;
     
     nums[0] =new int[3];
     nums[1] =new int[4];
     nums[2] =new int[2];

     for (int i=0; i<nums.length; i++)
     {
             for (int j=0; j<nums[i].length; j++)
         {                
          nums[i][j]=(int)(Math.random() *10);
          
         }   
     }
    //     for (int i=0; i<3; i++)
    //     {
    //             for (int j=0; j<4; j++)
    //         {               
    //              System.out.print(nums[i][j] + " ");
    //         }
    //       System.out.println();    
    //     }
        for (int n[] : nums)
        {
            for (int m:n)
            {
                System.out.print(m + " ");
            }
            System.out.println();
        }
    }
    
}
--------------------------------------------------------------------------
Example for the Strings in the Array

class Student
{
    int rollno;
    String name;
    int marks;
}



public class Hello 
{   

    public static void main(String a[])
    {
        // int num[] = new int[4];

        // num[0] = 4;
        // num[1] = 5;
        // num[2] = 6;
        // num[3] = 7;
        // for (int i=0;i<num.length;i++)
        // {
        // System.out.println(num[i]);
        // }
        Student s1= new Student();
        s1.rollno = 1;
        s1.name = "Sonu";
        s1.marks = 90;

        Student s2= new Student();
        s2.rollno = 2;
        s2.name = "vansh";
        s2.marks = 95;

        Student s3= new Student();
        s3.rollno = 3;
        s3.name = "Dhruvi";
        s3.marks = 98;

        Student students[] = new Student[3]; 
        students [0] = s1; 
        students [1] = s2;
        students [2] = s3;

        for (int i=0; i<students.length; i++)
        {
            System.out.println(students[i].name +" : " + students[i].marks);
        }

    }
    
}

-----------------------------------------------------------------------------------------

Stirng Example using Enhanced for loop

  for (Student stud : students)
        {
            System.out.println(stud.name +" : " + stud.marks);
        }
-------------------------------------------------------------------------------------------

Strings are Immutable which is unchanged,


public class Hello 
{   
    public static void main(String a[])
    {
        String name = "sonu";
        name = name + "Ghanate";
        System.out.println(name + "Srinivas");

        String s1 = "Sonu";
        String s2 = "Sonu";
        System.out.println(s1 == s2);
    }

    
}

And to make String Mutable we have to use String Buffer or String Builder.
-----------------------------------------------------------------------------------

Making String Mutable by using String Buffer or String Builder,
Their is difference between String Buffer as well as string builder i.e.: String Buffer does not get effected by Threats but the String Builder is Effected by Threats.

Ex for String Buffer


public class Hello 
{   
    public static void main(String a[])
    {
        StringBuffer sb = new StringBuffer ("Srinivas");
        // System.out.println(sb.capacity());
        // System.out.println(sb.length());
        sb.append(" ghanate");
       // sb.deleteCharAt(2);
       //sb.insert(9, "java");
       
        System.out.println(sb);
        //String str = sb.toString();
        

    }

    
}
-----------------------------------------------------------------------------------

Static is a Keyword which is applied to Class not to the Object, so whenever you update even a single object variable, that will be reflected to all Object Variables.

FOllowing is the example of Static Variable.
class Mobile
{
    String brand;
    int price;
    static String name;

    public void show()
    {
        System.out.println(brand  + ":" + price + ":" + name );
    }

}

public class Hello 
{   
    public static void main(String a[])
    {
        Mobile obj1 = new Mobile();
        obj1.brand = "Apple";
        obj1.price = 1500;
        obj1.name = "Smart Phone";
        Mobile obj2 = new Mobile();
        obj2.brand = "Samsung";
        obj2.price = 1400;
        obj2.name = "Smart Phone";

        Mobile.name = "phone";

        obj1.show();
        obj2.show();


        

    }

    
}

-------------------------------------------------------------------------------------------
ENCAPSULATION:   

class Human
{
   private int age = 11;
    private String name = "Sonu";

    public int getAge()
{
    return age;
}
public void setAge(int a)
{
    age = a;
}
public String getName()
{
    return name;
}
public void setName(String n)
{
    name = n;
}
}
    
public class Hello
{
    public static void main(String a[])
    {
        Human obj = new Human();
        obj.setAge (21);
        obj.setName ("sonu");
       System.out.println(obj.getName() + ":" + obj.getAge() );
       // System.out.println(obj.name);
    }
}

-----------------------------------------------------------------------------------------

THIS KEYWORD : this is the kewword refers to thh current object.

class Human
{
   private int age = 11;
    private String name = "Sonu";
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

  
}
    
public class Hello
{
    public static void main(String a[])
    {
        Human obj = new Human();
        obj.setAge (21);
        obj.setName ("sonu");
       System.out.println(obj.getName() + ":" + obj.getAge() );
       // System.out.println(obj.name);
    }
}

----------------------------------------------------------------------------------


Constructor:   Constructor is a special method, cause it looks like a method,  the main thing to remember is to put the name of the constructor same as that of the class name.



class Human
{
   private int age ;
    private String name;

    public Human()       //Default Constructor
    {
        //System.out.println("in constructor");
        age = 21;
        name = "Hero";
    }
    public Human(int a, String n)  //Parameterised Constructor
    {
        age = a;
        name = n;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }


}
    
public class Hello
{
    public static void main(String a[])
    {
        Human obj = new Human();
        Human obj1 = new Human(18, "Srinu");
        // obj.setAge (21);
        // obj.setName ("sonu");
        System.out.println(obj.getName() + ":" + obj.getAge() );
        System.out.println(obj1.getName() + ":" + obj1.getAge() );
       // System.out.println(obj.name);
    }
}
    
--------------------------------------------------------------------------------------------

Super Class: Super is a class used as a default constructor when used in a inheritance i.e for instance if b is extends to a then a will be super call extends to be and get printed in default.

class a extends Object
{
    public a()
    {
    System.out.println("in a");
    }
    public a(int n)
    {
        System.out.println("in a int");
    }
}
class b extends a
{
    public b()
    {
        super(5);
    System.out.println("in b");
    }
    public b(int n)
    {
        super();
        System.out.println("in b int");
    }
}

    
public class Hello
{
    public static void main(String a[])
    {
    
        b obj = new b();
        //a obj1 = new a(10);
        //System.out.println(obj.b());
    }
   
}
    
-----------------------------------------------------------------------------------------------

USING THIS method printing default and parameterized constructor 

class a extends Object
{
    public a()
    {
    System.out.println("in a");
    }
    public a(int n)
    {
        System.out.println("in a int");
    }
}
class b extends a
{
    public b()
    {
        super();
    System.out.println("in b");
    }
    public b(int n)
    {
        this();
        System.out.println("in b int");
    }


}

    
public class Hello
{
    public static void main(String a[])
    {
    
        b obj = new b(10);
        //a obj1 = new a(10);
        //System.out.println(obj.b());
    }
   
}

-----------------------------------------------------------------------------------------
Naming Conventions and All about using how to create object so that it can be used only once.


class a
{
    public a()
    {
        System.out.println("object created");
    }

    public void show()
    {
        System.out.println("in a show");
    }
}
    
public class Hello
{
    public static void main(String a[])
    {
        new a().show();
        //obj.show();

    }
   
}
    



// Camel Casing

// Class and interface -Capital Letter -  Calculator
// Variables and Methos - Small Letters - Marks
// Constants - Capital - PI,BRAND
//  showMyMarks() - CamelCasing

//Snake casing
//show_my_marks()
// My_casing

// age,DATA, Human(), 

-------------------------------------------------------------------------------------

Multilevel Inheritence: In multilevel inheritance if their are three or more classes then if the porperties of two classes are obtained by the third class .

Multiple inheritance is not supported in the java.

Example for Multi level Inheritence.



public class Hello
{
    public static void main(String a[])
    {
      SciCalc obj = new SciCalc();
      int r1 = obj.add(2,5);
      int r2 = obj.sub(10,4);
      int r3 = obj.multi(5,4);
      int r4 = obj.div(10,4);
      double r5 = obj.power(4,2);
    
      System.out.println(r1 + " " +r2 + " " + r3 + " " + r4 + " " +r5);

    }
   
}
    
-----

public class Calc  {
  
   
    public int add(int n1, int n2)
    {
        return n1+n2;
    }
    public int sub(int n1, int n2)
    {
        return n1-n2;
    }
}
 
--------

public class AdvCalc extends Calc{
    public int multi(int n1, int n2)
    {
        return n1*n2;
    }
    public int div(int n1, int n2)
    {
        return n1/n2;
    }
}

---------

public class SciCalc extends AdvCalc{
    public double power(int n1,int n2)
    {
        return Math.pow(n1,n2);
    }
}


----------------------------------------------------------------------------------------------


METHOD OVERRIDING:  

class Calc 

{  
    public int add(int n1, int n2)
    {
        return n1+n2;
    }
   
}
class AdvCalc extends Calc
{
    public int add(int n1, int n2)
    {
        return n1+n2 +10;
    }
}


public class Hello
{
    public static void main(String a[])
    {
      AdvCalc obj = new AdvCalc();
      int r1 = obj.add(2,5);
     
    
      System.out.println(r1 );

    }
   
}  

------------------------------------------------------------------------------------------

Packages


//import others.tools.AdvCalc;
import others.tools.*;


public class Hello
{
    public static void main(String a[])
    {
    // AdvCalc obj = new AdvCalc();
      //Calc obj = new Calc();
      int r1 = obj.add(2,5);
     
    
      System.out.println(r1 );

    }
   
}  



----------------------------------------------------------------------------------------
DYNAMIC Method Dispatch

class A
{
public void show()
{
  System.out.println("in Ashow");
}
}
class B extends A
{
public void show()
{
  System.out.println("in B show");
}
}
class C extends A
{
public void show()
{
  System.out.println("in C show");
}
}
class D extends A
{
  public void show()
  {
    System.out.println("in D show");
  }
}


public class Hello
{
    public static void main(String a[])
    {
       A obj = new A();
       obj.show();
       obj = new B();
       obj.show();
       obj = new C();
       obj.show();
       obj = new D();
       obj.show();
    }
   
}  

--------------------------------------------------------------------------------------------

Final Keyword:
Final Keyword is used to make a value constant to that variable and also used to make an Method Final to the particular Class.

class Calc
{
  public final void show()
  {
    System.out.println("By Raja");
  }
  public void add(int a, int b)
  {
    System.out.println(a+b);
  }
}
class AdvCalc extends Calc
{
 public void show()
{
  System.out.println("by Sonu");
}
}

public class Hello
{
    public static void main(String a[])
    
    {
     AdvCalc obj = new AdvCalc();
     //A obj = new A();
      obj.show();
      obj.add(4,5);
    }
   
}  
// FINAL:   CLASS, VRIABLES, METHODS.

---------------------------------------------------------------------------------------------


OBJECT CLASSES with HASHCODE and compating two different objects with same values with the help od Equals method.


class Laptop
{
   int price;
   String model;
   public String toString()
   {
      return model + ":" + price;
   }
  

}
public class Hello
{
    public static void main(String a[])
    
    {
      Laptop obj1= new Laptop();
      obj1.price = 1000;
      obj1.model = "Lenovo";
     System.out.println(obj1);

    }
   
}

-----------------------------------------------------------------------------------------
Type Casting: Type Casting Consists of both UP Casting And Down Casting.

In UP Casting the reference variable of parent class is type casted and when it come to the Down Casting the reference variable of the child class is type casted.


   class A
   {
   public void show1()
   {
      System.out.println("in A show");
   }
  }
  class B extends A
  {
    public void show2()
    {
      System.out.println("in B show");
    }
  }  


public class Hello
{
    public static void main(String a[])
    
    {
      A obj =(A) new B();
      obj.show1();
       B obj1 = (B)obj;
       obj1.show2();
    }
   
}


--------------------------------------------------------------------------------------


AUTO BOXING AND AUTO UNBOXING:

Taking the value of primitive datatype and assigning it to the wrapper class data type is AUTO BOXING.
On the other hand, taking the value of wrapper class data type and assigning it to the primitive data type it is known as AUTO BOXING.


public class Hello
{
    public static void main(String a[])
    
    {
      int num = 10;
      Integer num1 = num;   //Auto BOXING

      int num2 = num1;   // AUTO UNBOXING

      String str = "15";
      int num3 = Integer.parseInt(str);

      System.out.println(num3*10);


    }
   
}

------------------------------------------------------------------------------

Abstract Class: 


abstract class Car
{
  public abstract void fly();

  public abstract void drive();
  
  public void PlayMusic()
  {
    System.out.println("Play Music");
  }
}
class WagonR extends Car // Concrete Class to create the Object cause Object cannot be created without a regular class.
{
  public void fly()
  {
    System.out.println("Flying");
  }
  public void drive()
  {
    System.out.println("Driving");
  }
}

public class Hello
{
    public static void main(String a[])
    
    {
      Car obj = new WagonR();
      obj.drive();
      obj.PlayMusic();
      obj.fly();
    }
   
}


-----------------------------------------------------------------------------------

Inner Class(Class Inside a Class)

class A
{
  public void show()
  {
    System.out.println("in show");
  }

 static class B                           // when it is not static 
  {
    public void config()
    {
      System.out.println("in config");
    }
  }
}
public class Hello 
{
    public static void main(String a[])
    
    {
      A obj = new A();
      obj.show();
      A.B obj1 = new A.B();     //A.B obj1 = obj new B(); only when the class is not static
      obj1.config();
    }
   
}

Static Can Only Be Used for a Inner Class But not fir the Outer Class
---------------------------------------------------------------------------------------------

Anonymous Inner Class:  

class A
{
  public void show()
  {
    System.out.println("in show");
  }
  
}
public class Hello 
{
    public static void main(String a[])
    
    {
      A obj = new A()
      {
        public void show()
        {
          System.out.println("new show ");
        }

      };
      obj.show();
     
    }
   
}

----------------------------------------------------------------------------------------
Concepts of INTERFACE

interface Computer
{
   void code();

}
class Developer 
{
  public void devApp(Computer lap)
  {
    lap.code();
  }
}
class Laptop implements Computer
{
  public void code()
  {
    System.out.println("code, compile and execute");
  }
}
class  Desktop implements Computer
{
  public void code()
  {
    System.out.println("code, compile and execute :Faster");
  }
}
public class Hello 
{
    public static void main(String a[])
    
   {
    Computer lap = new Laptop();
    Computer desk = new Desktop();
    
    Developer obj = new Developer();
    obj.devApp(desk);

   }
}

-----------------------------------------------------------------------------------
//  Here you have to get three points about interface, and class

//  Class - Class -> EXTENDS
//  Class - Interface -> IMPLEMENTS
//  Interface - interface -> EXTENDS

interface A
{
  
  void show();
  void config();
}
interface X
{
  void run();
}
interface Y extends X
{
  
}
class B implements A,Y
{
  public void show()
  {
    System.out.println("in show");
  }
  public void config()
  {
    System.out.println("in congig");
  }
  public void run()
  {
    System.out.println("run");
  }
}

public class Hello 
{
    public static void main(String a[])
    
   {
    A obj;
    obj = new B();
    obj.show();
    obj.config(); 

    X obj1 = new B();
    obj1.run();

    

   }
}

-------------------------------------------------------------------------------------------


ENUMERATION EXAMPLE

enum Status{
  Running, Failed, pending, success
}

public class Hello 
{
    public static void main(String a[])
    
   {
      Status[] ss = Status.values();
     
      for (Status s : ss)
      {
        System.out.println(s +" : " + s.ordinal() );
      }

    

   }
}

--------------------------------------------------------------------------------------------
ENUM USING SWITCH and IF ELSE STATEMENTS:



enum Status{
  Running, Failed, pending, success
}

public class Hello 
{
    public static void main(String a[])
    
   {
    Status s = Status.success;
    switch (s)
    {

    case Running:
    
      System.out.println("good");
      break;
    
    case Failed:
    
      System.out.println("bad");
      break;
    
    case pending:
    
      System.out.println("in pending");
      break;
    
   default:
    
      System.out.println("done");

    

  }

    if (s == Status.Running)
    System.out.println("good");
   else if (s == Status.Failed)
      System.out.println("not good");
  else if(s == Status.pending)
    System.out.println("in pending");
  else 
    System.out.println("done");


   }
}



--------------------------------------------------------------------------------------------
Enum Using Constructors

enum Laptop{
  Dell(1500), HP, Apple(2000), Thinkpad(800);
private int price;
private Laptop(){
 price = 500;
}
  private Laptop(int price){
    this.price = price;
  }
  public int getPrice() {
      return price;
  }
  public void setPrice(int price) {
      this.price = price;
  }
}
public class Hello{
    public static void main(String a[])
   {
      for (Laptop lap : Laptop.values())
      {
        System.out.println(lap + ":" + lap.getPrice());
      }
   }
  }

--------------------------------------------------------------------------------------------

ANNOTATIONS:

class A{
  public void showTheOneBelongsToClass()
  {
    System.out.println("in A show");
  }
}
class B extends  A
{
  @Override
  public void showTheOneBelongsToClass()
  {
    System.out.println("in B show");
  }
}
public class Hello{
    public static void main(String a[])
   {
    B obj = new B();
    obj.showTheOneBelongsToClass();
   }
  }

-------------------------------------------------------------------------------
Types Of Interface ->>> Normal, Functional(Single Abstract Method Interface) and Marker Interface.

Normal Interface has multiple number of Methods and methods,
Functional Interface has only on Abstract Method Interface

Marker Interface has no classes and Methods.


In the Functional Interface only one class is been jsed 


Example For Functional Interface

@functionalInterface
interface A
{
  void show();
  
}
public class Hello
{

public static void main(String a[])
{
  A obj = new A()
  {
    public void show()
    {
      System.out.println("in show");
    }
  };
  obj.show();

}
}         

---------------------------------------------------------------------------------------

Java 8 has given us the feature called lanmbda Expressions which help us to reduce the code and increase the maintainability which help us to decrease code complexity,

the Syntax For Lambda Expression is ("->").

following is an example code with the usage of Lambda Expression,

@FunctionalInterface
interface A
{
  void show();
}
public class Hello
{

public static void main(String a[])
{
  A obj = () ->System.out.println("in show");
  obj.show();

}
}            

----------------------------------------------------------------------------------
Example with the help of the variable,

@FunctionalInterface
interface A
{
  void show(int i);
  
}
public class Hello
{

public static void main(String a[])
{
  A obj = (int i) ->System.out.println("in show  " + i);
  obj.show(5);

}
}            

----------------------------------------------------------------------------------------
Example withMultiple Variabl:

@FunctionalInterface
interface A
{
  int add(int i,int j);
  
}
public class Hello
{

  public static void main(String a[])
  {
    A obj =  (int i,int j) -> i+j;
    int result = obj.add(5,8);
    System.out.println(result);

  }
}            
--------------------------------------------------------------------------------

Exception: first example with TRY CATCH blocks,

public class Hello
{
  
  public static void main(String a[])
  {
   int i = 0;
   int j = 0;
  
   try {
    j = 20/i;
   } catch (Exception e) {
    // TODO: handle exception
   }
   {
    System.out.println(j);
    System.out.println("bye");
   }
  }
}            

-------------------------------------------------------------------------------------

MultipleException: Multiple tryings have multiple exception, and coming to the parent of all the exception is the regular Exception(e);

Comming to the Parent Class Exception it is again Extended by Throuable Class which is the topmost class of all the Exceptions.


public class Hello
{
  
  public static void main(String a[])
  {
   int i = 10;
   int j = 0;
   int nums[] = new int[5];
   String str = null;
  
   try {
    j = 20/i;
    System.out.println(nums[4]);
    System.out.println(str.length());
   } 
   catch (ArithmeticException e) 
   {
    System.out.println("their is some problem" );
   }
    catch(IndexOutOfBoundsException e)
    {
      System.out.println("Out of bonds");
    }
    catch(Exception e)
    {
      System.out.println("Something went wrong" +e);
    }
   {
    System.out.println(j);
    System.out.println("bye");
   
   }
  }
}     
-------------------------------------------------------------------------------------------

Throw Keyword Usage;

public class Hello
{
  
  public static void main(String a[])
  {
   int i = 20;
   int j = 0;
  
   try {
    j = 20/i;
   
    if(j==0);
    throw new ArithmeticException("I dont want to print Zero");
   } 
   catch (ArithmeticException e) 
   {
    j=20/1;
    System.out.println("their is some problem" +e );
   }
    catch(Exception e)
    {
      System.out.println("Something went wrong" +e );
    }
   {
    System.out.println(j);
    System.out.println("bye");
   
   }
  }
}         

--------------------------------------------------------------------------------------------

Creating your OWN Exception:

class SrinivasException extends Exception
{
public SrinivasException(String string)
{
 super (string);
}
 
}
public class Hello
{
  
  public static void main(String a[])
  {
   int i = 20;
   int j = 0;
  
   try {
    j = 20/i;
   
    if(j==0);
    throw new SrinivasException("I dont want to print Zero");
   } 
   catch (SrinivasException e) 
   {
    j=20/1;
    System.out.println("their is some problem" +e );
   }
    catch(Exception e)
    {
      System.out.println("Something went wrong" +e );
    }
   {
    System.out.println(j);
    System.out.println("bye");
   
   }
  }
}            

------------------------------------------------------------------------------------

Throws Keyword,

class SrinivasException extends Exception
{
public SrinivasException(String string)
{
 super (string);
}
 
}
class A{
  public void show() throws ClassNotFoundException
  {
    Class.forName("Calc");
    // try{
     
    //   }
    //   catch(ClassNotFoundException e)
    //   {
    //     System.out.println("Not Able to find" +e);
    //   }
  }
}
public class Hello
{
  static {
    System.out.println("code Loaded");
  }
  
  public static void main(String a[]) throws ClassNotFoundException
  {
    

    A obj = new A();
    obj.show();
  }
} 
  //  int i = 20;
  //  int j = 0;
  
  //  try {
  //   j = 20/i;
   
  //   if(j==0);
  //   throw new SrinivasException("I dont want to print Zero");
  //  } 
  //  catch (SrinivasException e) 
  //  {
  //   j=20/1;
  //   System.out.println("their is some problem" +e );
  //  }
  //   catch(Exception e)
  //   {
  //     System.out.println("Something went wrong" +e );
  //   }
  //  {
  //   System.out.println(j);
  //   System.out.println("bye");
   
  //  }
  // }
          
---------------------------------------------------------------------------------------------

How to take Input from the USER: in this example we have use only basic concept of system which is limited and not applicable for the bigger values,to achieve it a specialized class has to ne used i.e Buffer reader.
 

import java.io.IOException;
import java.net.SocketPermission;

public class Hello
{
  
  public static void main(String a[]) throws IOException
  {
    System.out.println("enter the number");
   int num = System.in.read();
   System.out.println(num-48);
  }
}   


---------------------------------------------------------------------------------------

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.SocketPermission;

public class Hello
{
  
  public static void main(String a[]) throws IOException
  {
    System.out.println("enter the number");
    InputStreamReader in = new InputStreamReader(System.in);
   BufferedReader bf = new BufferedReader(in);
   
   int num = Integer.parseInt(bf.readLine());
   System.out.println(num);
   bf.close();
  }
}   

-------------------------------------------------------------------------------------------

We can use Scanner Instead of Buffer Reader.

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.SocketPermission;
import java.util.Scanner;

public class Hello
{
  
  public static void main(String a[]) throws IOException
  {
    System.out.println("enter the number");
  //   InputStreamReader in = new InputStreamReader(System.in);
  //  BufferedReader bf = new BufferedReader(in);

  Scanner sc = new Scanner(System.in);
   
   int num = sc.nextInt();
   System.out.println(num);
   
  }
}   

----------------------------------------------------------------------------------------


Try With Resources, in which Finally is used to close the resourses.






